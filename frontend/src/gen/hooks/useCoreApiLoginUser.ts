/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { CoreApiLoginUserMutationRequest, CoreApiLoginUserMutationResponse, CoreApiLoginUser401 } from '../types/CoreApiLoginUser.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const coreApiLoginUserMutationKey = () => [{ url: '/api/v1/users/login/' }] as const

export type CoreApiLoginUserMutationKey = ReturnType<typeof coreApiLoginUserMutationKey>

/**
 * @summary Login User
 * {@link /api/v1/users/login/}
 */
export async function coreApiLoginUser(
  data: CoreApiLoginUserMutationRequest,
  config: Partial<RequestConfig<CoreApiLoginUserMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CoreApiLoginUserMutationResponse, ResponseErrorConfig<CoreApiLoginUser401>, CoreApiLoginUserMutationRequest>({
    method: 'POST',
    url: `/api/v1/users/login/`,
    data,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Login User
 * {@link /api/v1/users/login/}
 */
export function useCoreApiLoginUser<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CoreApiLoginUserMutationResponse,
      ResponseErrorConfig<CoreApiLoginUser401>,
      { data: CoreApiLoginUserMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CoreApiLoginUserMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? coreApiLoginUserMutationKey()

  return useMutation<CoreApiLoginUserMutationResponse, ResponseErrorConfig<CoreApiLoginUser401>, { data: CoreApiLoginUserMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return coreApiLoginUser(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}