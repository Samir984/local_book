/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  CoreApiPartialUpdateBookMutationRequest,
  CoreApiPartialUpdateBookMutationResponse,
  CoreApiPartialUpdateBookPathParams,
  CoreApiPartialUpdateBook400,
  CoreApiPartialUpdateBook403,
  CoreApiPartialUpdateBook404,
} from '../types/CoreApiPartialUpdateBook.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const coreApiPartialUpdateBookMutationKey = () => [{ url: '/api/v1/books/{id}/' }] as const

export type CoreApiPartialUpdateBookMutationKey = ReturnType<typeof coreApiPartialUpdateBookMutationKey>

/**
 * @description Patch book specified based on id
 * @summary Partial Update Book
 * {@link /api/v1/books/:id/}
 */
export async function coreApiPartialUpdateBook(
  id: CoreApiPartialUpdateBookPathParams['id'],
  data?: CoreApiPartialUpdateBookMutationRequest,
  config: Partial<RequestConfig<CoreApiPartialUpdateBookMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CoreApiPartialUpdateBookMutationResponse,
    ResponseErrorConfig<CoreApiPartialUpdateBook400 | CoreApiPartialUpdateBook403 | CoreApiPartialUpdateBook404>,
    CoreApiPartialUpdateBookMutationRequest
  >({ method: 'PATCH', url: `/api/v1/books/${id}/`, data, ...requestConfig })
  return res.data
}

/**
 * @description Patch book specified based on id
 * @summary Partial Update Book
 * {@link /api/v1/books/:id/}
 */
export function useCoreApiPartialUpdateBook<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CoreApiPartialUpdateBookMutationResponse,
      ResponseErrorConfig<CoreApiPartialUpdateBook400 | CoreApiPartialUpdateBook403 | CoreApiPartialUpdateBook404>,
      { id: CoreApiPartialUpdateBookPathParams['id']; data?: CoreApiPartialUpdateBookMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CoreApiPartialUpdateBookMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? coreApiPartialUpdateBookMutationKey()

  return useMutation<
    CoreApiPartialUpdateBookMutationResponse,
    ResponseErrorConfig<CoreApiPartialUpdateBook400 | CoreApiPartialUpdateBook403 | CoreApiPartialUpdateBook404>,
    { id: CoreApiPartialUpdateBookPathParams['id']; data?: CoreApiPartialUpdateBookMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return coreApiPartialUpdateBook(id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}