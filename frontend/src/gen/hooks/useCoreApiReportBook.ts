/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { CoreApiReportBookMutationRequest, CoreApiReportBookMutationResponse, CoreApiReportBook400 } from '../types/CoreApiReportBook.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const coreApiReportBookMutationKey = () => [{ url: '/api/v1/reports/report-book/' }] as const

export type CoreApiReportBookMutationKey = ReturnType<typeof coreApiReportBookMutationKey>

/**
 * @description Report book
 * @summary Report Book
 * {@link /api/v1/reports/report-book/}
 */
export async function coreApiReportBook(
  data: CoreApiReportBookMutationRequest,
  config: Partial<RequestConfig<CoreApiReportBookMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CoreApiReportBookMutationResponse, ResponseErrorConfig<CoreApiReportBook400>, CoreApiReportBookMutationRequest>({
    method: 'POST',
    url: `/api/v1/reports/report-book/`,
    data,
    ...requestConfig,
  })
  return res.data
}

/**
 * @description Report book
 * @summary Report Book
 * {@link /api/v1/reports/report-book/}
 */
export function useCoreApiReportBook<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CoreApiReportBookMutationResponse,
      ResponseErrorConfig<CoreApiReportBook400>,
      { data: CoreApiReportBookMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CoreApiReportBookMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? coreApiReportBookMutationKey()

  return useMutation<CoreApiReportBookMutationResponse, ResponseErrorConfig<CoreApiReportBook400>, { data: CoreApiReportBookMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return coreApiReportBook(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}