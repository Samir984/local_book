/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  CoreApiCreateBookMutationRequest,
  CoreApiCreateBookMutationResponse,
  CoreApiCreateBook400,
  CoreApiCreateBook500,
} from '../types/CoreApiCreateBook.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const coreApiCreateBookMutationKey = () => [{ url: '/api/v1/books/create/' }] as const

export type CoreApiCreateBookMutationKey = ReturnType<typeof coreApiCreateBookMutationKey>

/**
 * @description Create book
 * @summary Create Book
 * {@link /api/v1/books/create/}
 */
export async function coreApiCreateBook(
  data: CoreApiCreateBookMutationRequest,
  config: Partial<RequestConfig<CoreApiCreateBookMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CoreApiCreateBookMutationResponse,
    ResponseErrorConfig<CoreApiCreateBook400 | CoreApiCreateBook500>,
    CoreApiCreateBookMutationRequest
  >({ method: 'POST', url: `/api/v1/books/create/`, data, ...requestConfig })
  return res.data
}

/**
 * @description Create book
 * @summary Create Book
 * {@link /api/v1/books/create/}
 */
export function useCoreApiCreateBook<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CoreApiCreateBookMutationResponse,
      ResponseErrorConfig<CoreApiCreateBook400 | CoreApiCreateBook500>,
      { data: CoreApiCreateBookMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CoreApiCreateBookMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? coreApiCreateBookMutationKey()

  return useMutation<
    CoreApiCreateBookMutationResponse,
    ResponseErrorConfig<CoreApiCreateBook400 | CoreApiCreateBook500>,
    { data: CoreApiCreateBookMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return coreApiCreateBook(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}