/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { CoreApiCheckUsernameQueryResponse, CoreApiCheckUsernameQueryParams, CoreApiCheckUsername400 } from '../types/CoreApiCheckUsername.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const coreApiCheckUsernameSuspenseQueryKey = (params: CoreApiCheckUsernameQueryParams) =>
  [{ url: '/api/v1/users/check-username/' }, ...(params ? [params] : [])] as const

export type CoreApiCheckUsernameSuspenseQueryKey = ReturnType<typeof coreApiCheckUsernameSuspenseQueryKey>

/**
 * @description Check for username exits for not.
 * @summary Check Username
 * {@link /api/v1/users/check-username/}
 */
export async function coreApiCheckUsernameSuspense(params: CoreApiCheckUsernameQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CoreApiCheckUsernameQueryResponse, ResponseErrorConfig<CoreApiCheckUsername400>, unknown>({
    method: 'GET',
    url: `/api/v1/users/check-username/`,
    params,
    ...requestConfig,
  })
  return res.data
}

export function coreApiCheckUsernameSuspenseQueryOptions(
  params: CoreApiCheckUsernameQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = coreApiCheckUsernameSuspenseQueryKey(params)
  return queryOptions<CoreApiCheckUsernameQueryResponse, ResponseErrorConfig<CoreApiCheckUsername400>, CoreApiCheckUsernameQueryResponse, typeof queryKey>({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return coreApiCheckUsernameSuspense(params, config)
    },
  })
}

/**
 * @description Check for username exits for not.
 * @summary Check Username
 * {@link /api/v1/users/check-username/}
 */
export function useCoreApiCheckUsernameSuspense<TData = CoreApiCheckUsernameQueryResponse, TQueryKey extends QueryKey = CoreApiCheckUsernameSuspenseQueryKey>(
  params: CoreApiCheckUsernameQueryParams,
  options: {
    query?: Partial<UseSuspenseQueryOptions<CoreApiCheckUsernameQueryResponse, ResponseErrorConfig<CoreApiCheckUsername400>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? coreApiCheckUsernameSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(coreApiCheckUsernameSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<CoreApiCheckUsername400>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}