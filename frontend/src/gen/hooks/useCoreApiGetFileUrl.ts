/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { CoreApiGetFileUrlQueryResponse, CoreApiGetFileUrlQueryParams, CoreApiGetFileUrl404 } from '../types/CoreApiGetFileUrl.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const coreApiGetFileUrlQueryKey = (params: CoreApiGetFileUrlQueryParams) => [{ url: '/api/v1/s3/get-image' }, ...(params ? [params] : [])] as const

export type CoreApiGetFileUrlQueryKey = ReturnType<typeof coreApiGetFileUrlQueryKey>

/**
 * @description get S3 file  based on its key
 * @summary Get File Url
 * {@link /api/v1/s3/get-image}
 */
export async function coreApiGetFileUrl(params: CoreApiGetFileUrlQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CoreApiGetFileUrlQueryResponse, ResponseErrorConfig<CoreApiGetFileUrl404>, unknown>({
    method: 'GET',
    url: `/api/v1/s3/get-image`,
    params,
    ...requestConfig,
  })
  return res.data
}

export function coreApiGetFileUrlQueryOptions(params: CoreApiGetFileUrlQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = coreApiGetFileUrlQueryKey(params)
  return queryOptions<CoreApiGetFileUrlQueryResponse, ResponseErrorConfig<CoreApiGetFileUrl404>, CoreApiGetFileUrlQueryResponse, typeof queryKey>({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return coreApiGetFileUrl(params, config)
    },
  })
}

/**
 * @description get S3 file  based on its key
 * @summary Get File Url
 * {@link /api/v1/s3/get-image}
 */
export function useCoreApiGetFileUrl<
  TData = CoreApiGetFileUrlQueryResponse,
  TQueryData = CoreApiGetFileUrlQueryResponse,
  TQueryKey extends QueryKey = CoreApiGetFileUrlQueryKey,
>(
  params: CoreApiGetFileUrlQueryParams,
  options: {
    query?: Partial<QueryObserverOptions<CoreApiGetFileUrlQueryResponse, ResponseErrorConfig<CoreApiGetFileUrl404>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? coreApiGetFileUrlQueryKey(params)

  const query = useQuery(
    {
      ...(coreApiGetFileUrlQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<CoreApiGetFileUrl404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}