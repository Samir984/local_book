/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  CoreApiGetUploadUrlMutationResponse,
  CoreApiGetUploadUrlQueryParams,
  CoreApiGetUploadUrl400,
  CoreApiGetUploadUrl500,
} from '../types/CoreApiGetUploadUrl.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const coreApiGetUploadUrlMutationKey = () => [{ url: '/api/v1/s3/get-upload-url' }] as const

export type CoreApiGetUploadUrlMutationKey = ReturnType<typeof coreApiGetUploadUrlMutationKey>

/**
 * @description Generates a pre-signed URL for uploading a file to S3.
 * @summary Get Upload Url
 * {@link /api/v1/s3/get-upload-url}
 */
export async function coreApiGetUploadUrl(params: CoreApiGetUploadUrlQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CoreApiGetUploadUrlMutationResponse, ResponseErrorConfig<CoreApiGetUploadUrl400 | CoreApiGetUploadUrl500>, unknown>({
    method: 'POST',
    url: `/api/v1/s3/get-upload-url`,
    params,
    ...requestConfig,
  })
  return res.data
}

/**
 * @description Generates a pre-signed URL for uploading a file to S3.
 * @summary Get Upload Url
 * {@link /api/v1/s3/get-upload-url}
 */
export function useCoreApiGetUploadUrl<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CoreApiGetUploadUrlMutationResponse,
      ResponseErrorConfig<CoreApiGetUploadUrl400 | CoreApiGetUploadUrl500>,
      { params: CoreApiGetUploadUrlQueryParams },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? coreApiGetUploadUrlMutationKey()

  return useMutation<
    CoreApiGetUploadUrlMutationResponse,
    ResponseErrorConfig<CoreApiGetUploadUrl400 | CoreApiGetUploadUrl500>,
    { params: CoreApiGetUploadUrlQueryParams },
    TContext
  >(
    {
      mutationFn: async ({ params }) => {
        return coreApiGetUploadUrl(params, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}