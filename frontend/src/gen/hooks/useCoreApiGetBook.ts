/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { CoreApiGetBookQueryResponse, CoreApiGetBookPathParams, CoreApiGetBook404 } from '../types/CoreApiGetBook.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const coreApiGetBookQueryKey = (id: CoreApiGetBookPathParams['id']) => [{ url: '/api/v1/books/:id/', params: { id: id } }] as const

export type CoreApiGetBookQueryKey = ReturnType<typeof coreApiGetBookQueryKey>

/**
 * @description Get book details
 * @summary Get Book
 * {@link /api/v1/books/:id/}
 */
export async function coreApiGetBook(id: CoreApiGetBookPathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CoreApiGetBookQueryResponse, ResponseErrorConfig<CoreApiGetBook404>, unknown>({
    method: 'GET',
    url: `/api/v1/books/${id}/`,
    ...requestConfig,
  })
  return res.data
}

export function coreApiGetBookQueryOptions(id: CoreApiGetBookPathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = coreApiGetBookQueryKey(id)
  return queryOptions<CoreApiGetBookQueryResponse, ResponseErrorConfig<CoreApiGetBook404>, CoreApiGetBookQueryResponse, typeof queryKey>({
    enabled: !!id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return coreApiGetBook(id, config)
    },
  })
}

/**
 * @description Get book details
 * @summary Get Book
 * {@link /api/v1/books/:id/}
 */
export function useCoreApiGetBook<
  TData = CoreApiGetBookQueryResponse,
  TQueryData = CoreApiGetBookQueryResponse,
  TQueryKey extends QueryKey = CoreApiGetBookQueryKey,
>(
  id: CoreApiGetBookPathParams['id'],
  options: {
    query?: Partial<QueryObserverOptions<CoreApiGetBookQueryResponse, ResponseErrorConfig<CoreApiGetBook404>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? coreApiGetBookQueryKey(id)

  const query = useQuery(
    {
      ...(coreApiGetBookQueryOptions(id, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<CoreApiGetBook404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}