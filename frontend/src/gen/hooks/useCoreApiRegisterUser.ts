/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { CoreApiRegisterUserMutationRequest, CoreApiRegisterUserMutationResponse, CoreApiRegisterUser400 } from '../types/CoreApiRegisterUser.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const coreApiRegisterUserMutationKey = () => [{ url: '/api/v1/users/register/' }] as const

export type CoreApiRegisterUserMutationKey = ReturnType<typeof coreApiRegisterUserMutationKey>

/**
 * @description User registration
 * @summary Register User
 * {@link /api/v1/users/register/}
 */
export async function coreApiRegisterUser(
  data: CoreApiRegisterUserMutationRequest,
  config: Partial<RequestConfig<CoreApiRegisterUserMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CoreApiRegisterUserMutationResponse, ResponseErrorConfig<CoreApiRegisterUser400>, CoreApiRegisterUserMutationRequest>({
    method: 'POST',
    url: `/api/v1/users/register/`,
    data,
    ...requestConfig,
  })
  return res.data
}

/**
 * @description User registration
 * @summary Register User
 * {@link /api/v1/users/register/}
 */
export function useCoreApiRegisterUser<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CoreApiRegisterUserMutationResponse,
      ResponseErrorConfig<CoreApiRegisterUser400>,
      { data: CoreApiRegisterUserMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CoreApiRegisterUserMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? coreApiRegisterUserMutationKey()

  return useMutation<CoreApiRegisterUserMutationResponse, ResponseErrorConfig<CoreApiRegisterUser400>, { data: CoreApiRegisterUserMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return coreApiRegisterUser(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}