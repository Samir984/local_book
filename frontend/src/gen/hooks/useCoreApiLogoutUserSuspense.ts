/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { CoreApiLogoutUserQueryResponse, CoreApiLogoutUser401 } from '../types/CoreApiLogoutUser.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const coreApiLogoutUserSuspenseQueryKey = () => [{ url: '/api/v1/users/logout/' }] as const

export type CoreApiLogoutUserSuspenseQueryKey = ReturnType<typeof coreApiLogoutUserSuspenseQueryKey>

/**
 * @summary Logout User
 * {@link /api/v1/users/logout/}
 */
export async function coreApiLogoutUserSuspense(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CoreApiLogoutUserQueryResponse, ResponseErrorConfig<CoreApiLogoutUser401>, unknown>({
    method: 'GET',
    url: `/api/v1/users/logout/`,
    ...requestConfig,
  })
  return res.data
}

export function coreApiLogoutUserSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = coreApiLogoutUserSuspenseQueryKey()
  return queryOptions<CoreApiLogoutUserQueryResponse, ResponseErrorConfig<CoreApiLogoutUser401>, CoreApiLogoutUserQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return coreApiLogoutUserSuspense(config)
    },
  })
}

/**
 * @summary Logout User
 * {@link /api/v1/users/logout/}
 */
export function useCoreApiLogoutUserSuspense<TData = CoreApiLogoutUserQueryResponse, TQueryKey extends QueryKey = CoreApiLogoutUserSuspenseQueryKey>(
  options: {
    query?: Partial<UseSuspenseQueryOptions<CoreApiLogoutUserQueryResponse, ResponseErrorConfig<CoreApiLogoutUser401>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? coreApiLogoutUserSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...(coreApiLogoutUserSuspenseQueryOptions(config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<CoreApiLogoutUser401>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}