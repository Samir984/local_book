/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { CoreApiListUserBooksQueryResponse, CoreApiListUserBooksQueryParams } from '../types/CoreApiListUserBooks.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const coreApiListUserBooksSuspenseQueryKey = (params?: CoreApiListUserBooksQueryParams) =>
  [{ url: '/api/v1/books/current-users/' }, ...(params ? [params] : [])] as const

export type CoreApiListUserBooksSuspenseQueryKey = ReturnType<typeof coreApiListUserBooksSuspenseQueryKey>

/**
 * @description Get user book
 * @summary List User Books
 * {@link /api/v1/books/current-users/}
 */
export async function coreApiListUserBooksSuspense(params?: CoreApiListUserBooksQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CoreApiListUserBooksQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/api/v1/books/current-users/`,
    params,
    ...requestConfig,
  })
  return res.data
}

export function coreApiListUserBooksSuspenseQueryOptions(
  params?: CoreApiListUserBooksQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = coreApiListUserBooksSuspenseQueryKey(params)
  return queryOptions<CoreApiListUserBooksQueryResponse, ResponseErrorConfig<Error>, CoreApiListUserBooksQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return coreApiListUserBooksSuspense(params, config)
    },
  })
}

/**
 * @description Get user book
 * @summary List User Books
 * {@link /api/v1/books/current-users/}
 */
export function useCoreApiListUserBooksSuspense<TData = CoreApiListUserBooksQueryResponse, TQueryKey extends QueryKey = CoreApiListUserBooksSuspenseQueryKey>(
  params?: CoreApiListUserBooksQueryParams,
  options: {
    query?: Partial<UseSuspenseQueryOptions<CoreApiListUserBooksQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? coreApiListUserBooksSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(coreApiListUserBooksSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}