/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  CoreApiListUserBooksQueryResponse,
  CoreApiListUserBooksPathParams,
  CoreApiListUserBooksQueryParams,
  CoreApiListUserBooks404,
} from '../types/CoreApiListUserBooks.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const coreApiListUserBooksQueryKey = (user_id: CoreApiListUserBooksPathParams['user_id'], params?: CoreApiListUserBooksQueryParams) =>
  [{ url: '/api/v1/books/current_user/:user_id/', params: { user_id: user_id } }, ...(params ? [params] : [])] as const

export type CoreApiListUserBooksQueryKey = ReturnType<typeof coreApiListUserBooksQueryKey>

/**
 * @description Get user book
 * @summary List User Books
 * {@link /api/v1/books/current_user/:user_id/}
 */
export async function coreApiListUserBooks(
  user_id: CoreApiListUserBooksPathParams['user_id'],
  params?: CoreApiListUserBooksQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CoreApiListUserBooksQueryResponse, ResponseErrorConfig<CoreApiListUserBooks404>, unknown>({
    method: 'GET',
    url: `/api/v1/books/current_user/${user_id}/`,
    params,
    ...requestConfig,
  })
  return res.data
}

export function coreApiListUserBooksQueryOptions(
  user_id: CoreApiListUserBooksPathParams['user_id'],
  params?: CoreApiListUserBooksQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = coreApiListUserBooksQueryKey(user_id, params)
  return queryOptions<CoreApiListUserBooksQueryResponse, ResponseErrorConfig<CoreApiListUserBooks404>, CoreApiListUserBooksQueryResponse, typeof queryKey>({
    enabled: !!user_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return coreApiListUserBooks(user_id, params, config)
    },
  })
}

/**
 * @description Get user book
 * @summary List User Books
 * {@link /api/v1/books/current_user/:user_id/}
 */
export function useCoreApiListUserBooks<
  TData = CoreApiListUserBooksQueryResponse,
  TQueryData = CoreApiListUserBooksQueryResponse,
  TQueryKey extends QueryKey = CoreApiListUserBooksQueryKey,
>(
  user_id: CoreApiListUserBooksPathParams['user_id'],
  params?: CoreApiListUserBooksQueryParams,
  options: {
    query?: Partial<QueryObserverOptions<CoreApiListUserBooksQueryResponse, ResponseErrorConfig<CoreApiListUserBooks404>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? coreApiListUserBooksQueryKey(user_id, params)

  const query = useQuery(
    {
      ...(coreApiListUserBooksQueryOptions(user_id, params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<CoreApiListUserBooks404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}