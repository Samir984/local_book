/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { CoreApiCreateBookmarkMutationRequest, CoreApiCreateBookmarkMutationResponse, CoreApiCreateBookmark400 } from '../types/CoreApiCreateBookmark.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const coreApiCreateBookmarkMutationKey = () => [{ url: '/api/v1/bookmarks/' }] as const

export type CoreApiCreateBookmarkMutationKey = ReturnType<typeof coreApiCreateBookmarkMutationKey>

/**
 * @description Create book schema
 * @summary Create Bookmark
 * {@link /api/v1/bookmarks/}
 */
export async function coreApiCreateBookmark(
  data: CoreApiCreateBookmarkMutationRequest,
  config: Partial<RequestConfig<CoreApiCreateBookmarkMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CoreApiCreateBookmarkMutationResponse, ResponseErrorConfig<CoreApiCreateBookmark400>, CoreApiCreateBookmarkMutationRequest>({
    method: 'POST',
    url: `/api/v1/bookmarks/`,
    data,
    ...requestConfig,
  })
  return res.data
}

/**
 * @description Create book schema
 * @summary Create Bookmark
 * {@link /api/v1/bookmarks/}
 */
export function useCoreApiCreateBookmark<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CoreApiCreateBookmarkMutationResponse,
      ResponseErrorConfig<CoreApiCreateBookmark400>,
      { data: CoreApiCreateBookmarkMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CoreApiCreateBookmarkMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? coreApiCreateBookmarkMutationKey()

  return useMutation<
    CoreApiCreateBookmarkMutationResponse,
    ResponseErrorConfig<CoreApiCreateBookmark400>,
    { data: CoreApiCreateBookmarkMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return coreApiCreateBookmark(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}